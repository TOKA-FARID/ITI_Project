// pipeline to deploy the app to a EKS cluster on AWS..

pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = "us-east-1"
    }
    
    stages {
        stage('Initialize') {
            steps {
                // You need AWS CLI configured with necessary permissions to interact with EKS
                sh 'aws eks --region us-east-1 update-kubeconfig --name eks'
                sh 'kubectl get all'
                sh 'rm -rf ./ITI_Project'
                sh 'git clone https://github.com/TOKA-FARID/ITI_Project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t my-app ./ITI_Project/App'
                // Tagging for AWS ECR (Elastic Container Registry) repository
                sh 'docker tag flask-app 1410-8352-5350.dkr.ecr.us-east-1.amazonaws.com/flask-app:latest'
            }
        }

        stage('Configure Docker Registry') {
            steps {
                // AWS ECR login command
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 1410-8352-5350.dkr.ecr.us-east-1.amazonaws.com'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push 1410-8352-5350.dkr.ecr.us-east-1.amazonaws.com/flask-app:latest'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'kubectl apply -f ./ITI_Project/Kubernetes/app-deployment.yaml'
                sh 'kubectl apply -f ./ITI_Project/Kubernetes/app-service.yaml'
                sh 'kubectl get all'
            }
        }
    }
}
